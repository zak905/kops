apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: provisioners.karpenter.sh
spec:
  group: karpenter.sh
  names:
    kind: Provisioner
    listKind: ProvisionerList
    plural: provisioners
    singular: provisioner
  scope: Cluster
  versions:
  - name: v1alpha5
    schema:
      openAPIV3Schema:
        description: Provisioner is the Schema for the Provisioners API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ProvisionerSpec is the top level provisioner specification.
              Provisioners launch nodes in response to pods that are unschedulable.
              A single provisioner is capable of managing a diverse set of nodes.
              Node properties are determined from a combination of provisioner and
              pod scheduling constraints.
            properties:
              labels:
                additionalProperties:
                  type: string
                description: Labels are layered with Requirements and applied to every
                  node.
                type: object
              limits:
                description: Limits define a set of bounds for provisioning capacity.
                properties:
                  resources:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: Resources contains all the allocatable resources
                      that Karpenter supports for limiting.
                    type: object
                type: object
              provider:
                description: Provider contains fields specific to your cloudprovider.
                type: object
                x-kubernetes-preserve-unknown-fields: true
              requirements:
                description: Requirements are layered with Labels and applied to every
                  node.
                items:
                  description: A node selector requirement is a selector that contains
                    values, a key, and an operator that relates the key and values.
                  properties:
                    key:
                      description: The label key that the selector applies to.
                      type: string
                    operator:
                      description: Represents a key's relationship to a set of values.
                        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and
                        Lt.
                      type: string
                    values:
                      description: An array of string values. If the operator is In
                        or NotIn, the values array must be non-empty. If the operator
                        is Exists or DoesNotExist, the values array must be empty.
                        If the operator is Gt or Lt, the values array must have a
                        single element, which will be interpreted as an integer. This
                        array is replaced during a strategic merge patch.
                      items:
                        type: string
                      type: array
                  required:
                  - key
                  - operator
                  type: object
                type: array
              taints:
                description: Taints will be applied to every node launched by the
                  Provisioner. If specified, the provisioner will not provision nodes
                  for pods that do not have matching tolerations. Additional taints
                  will be created that match pod tolerations on a per-node basis.
                items:
                  description: The node this Taint is attached to has the "effect"
                    on any pod that does not tolerate the Taint.
                  properties:
                    effect:
                      description: Required. The effect of the taint on pods that
                        do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule
                        and NoExecute.
                      type: string
                    key:
                      description: Required. The taint key to be applied to a node.
                      type: string
                    timeAdded:
                      description: TimeAdded represents the time at which the taint
                        was added. It is only written for NoExecute taints.
                      format: date-time
                      type: string
                    value:
                      description: The taint value corresponding to the taint key.
                      type: string
                  required:
                  - effect
                  - key
                  type: object
                type: array
              ttlSecondsAfterEmpty:
                description: "TTLSecondsAfterEmpty is the number of seconds the controller
                  will wait before attempting to delete a node, measured from when
                  the node is detected to be empty. A Node is considered to be empty
                  when it does not have pods scheduled to it, excluding daemonsets.
                  \n Termination due to underutilization is disabled if this field
                  is not set."
                format: int64
                type: integer
              ttlSecondsUntilExpired:
                description: "TTLSecondsUntilExpired is the number of seconds the
                  controller will wait before terminating a node, measured from when
                  the node is created. This is useful to implement features like eventually
                  consistent node upgrade, memory leak protection, and disruption
                  testing. \n Termination due to expiration is disabled if this field
                  is not set."
                format: int64
                type: integer
            type: object
          status:
            description: ProvisionerStatus defines the observed state of Provisioner
            properties:
              conditions:
                description: Conditions is the set of conditions required for this
                  provisioner to scale its target, and indicates whether or not those
                  conditions are met.
                items:
                  description: 'Condition defines a readiness condition for a Knative
                    resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties'
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time the condition
                        transitioned from one status to another. We use VolatileTime
                        in place of metav1.Time to exclude this from creating equality.Semantic
                        differences (all other things held constant).
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition.
                      type: string
                    reason:
                      description: The reason for the condition's last transition.
                      type: string
                    severity:
                      description: Severity with which to treat failures of this type
                        of condition. When this is not specified, it defaults to Error.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              lastScaleTime:
                description: LastScaleTime is the last time the Provisioner scaled
                  the number of nodes
                format: date-time
                type: string
              resources:
                additionalProperties:
                  anyOf:
                  - type: integer
                  - type: string
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                description: Resources is the list of resources that have been provisioned.
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---

apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter
  namespace: kube-system

---

apiVersion: v1
data: {}
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-webhook-cert
  namespace: kube-system

---

apiVersion: v1
data:
  zap-logger-config: |
    {
      "level": "debug",
      "development": true,
      "disableStacktrace": true,
      "disableCaller": true,
      "sampling": {
        "initial": 100,
        "thereafter": 100
      },
      "outputPaths": ["stdout"],
    "errorOutputPaths": ["stderr"],
      "encoding": "console",
      "encoderConfig": {
        "timeKey": "time",
        "levelKey": "level",
        "nameKey": "logger",
        "callerKey": "caller",
        "messageKey": "message",
        "stacktraceKey": "stacktrace",
        "levelEncoder": "capital",
        "timeEncoder": "iso8601"
      }
    }
kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    app.kubernetes.io/part-of: karpenter
    k8s-addon: karpenter.sh
  name: karpenter-config-logging
  namespace: kube-system

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-controller
rules:
- apiGroups:
  - karpenter.sh
  resources:
  - provisioners
  - provisioners/status
  verbs:
  - create
  - delete
  - patch
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  - pods
  verbs:
  - get
  - list
  - watch
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  - persistentvolumes
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - pods/binding
  - pods/eviction
  verbs:
  - create
- apiGroups:
  - apps
  resources:
  - daemonsets
  verbs:
  - list
  - watch

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-webhook
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  verbs:
  - get
  - watch
  - list
  - update

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karpenter-controller
subjects:
- kind: ServiceAccount
  name: karpenter
  namespace: kube-system

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: karpenter-webhook
subjects:
- kind: ServiceAccount
  name: karpenter
  namespace: kube-system

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-controller
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-webhook
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - watch
  - create
  - update

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-controller
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: karpenter-controller
subjects:
- kind: ServiceAccount
  name: karpenter
  namespace: kube-system

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-webhook
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: karpenter-webhook
subjects:
- kind: ServiceAccount
  name: karpenter
  namespace: kube-system

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-metrics
  namespace: kube-system
spec:
  ports:
  - port: 8080
    targetPort: metrics
  selector:
    karpenter: controller

---

apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-webhook
  namespace: kube-system
spec:
  ports:
  - port: 443
    targetPort: webhook
  selector:
    karpenter: webhook

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-controller
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      karpenter: controller
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        karpenter: controller
        kops.k8s.io/managed-by: kops
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
              - key: karpenter.sh/provisioner-name
                operator: DoesNotExist
      containers:
      - env:
        - name: AWS_ENI_LIMITED_POD_DENSITY
          value: "true"
        - name: AWS_REGION
          value: us-test-1
        - name: CLUSTER_NAME
          value: minimal.example.com
        - name: CLUSTER_ENDPOINT
          value: https://api.internal.minimal.example.com
        - name: CONFIG_LOGGING_NAME
          value: karpenter-config-logging
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_ROLE_ARN
          value: arn:aws-test:iam::123456789012:role/karpenter.kube-system.sa.minimal.example.com
        - name: AWS_WEB_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/amazonaws.com/token
        image: public.ecr.aws/karpenter/controller:v0.6.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
        name: manager
        ports:
        - containerPort: 8080
          name: metrics
        - containerPort: 8081
          name: health-probe
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
        resources:
          limits:
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - mountPath: /var/run/secrets/amazonaws.com/
          name: token-amazonaws-com
          readOnly: true
      dnsPolicy: Default
      priorityClassName: system-cluster-critical
      securityContext:
        fsGroup: 10001
      serviceAccountName: karpenter
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            karpenter: webhook
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            karpenter: webhook
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
      volumes:
      - name: token-amazonaws-com
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              audience: amazonaws.com
              expirationSeconds: 86400
              path: token

---

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-webhook
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      karpenter: webhook
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        karpenter: webhook
        kops.k8s.io/managed-by: kops
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
              - key: karpenter.sh/provisioner-name
                operator: DoesNotExist
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
              - key: karpenter.sh/provisioner-name
                operator: DoesNotExist
              - key: node-role.kubernetes.io/master
                operator: Exists
      containers:
      - args:
        - -port=8443
        env:
        - name: AWS_REGION
          value: us-test-1
        - name: CLUSTER_NAME
          value: minimal.example.com
        - name: CLUSTER_ENDPOINT
          value: https://api.internal.minimal.example.com
        - name: CONFIG_LOGGING_NAME
          value: karpenter-config-logging
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: AWS_ROLE_ARN
          value: arn:aws-test:iam::123456789012:role/karpenter.kube-system.sa.minimal.example.com
        - name: AWS_WEB_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/amazonaws.com/token
        image: public.ecr.aws/karpenter/webhook:v0.6.0
        livenessProbe:
          httpGet:
            port: 8443
            scheme: HTTPS
        name: webhook
        ports:
        - containerPort: 8443
          name: webhook
        readinessProbe:
          httpGet:
            port: 8443
            scheme: HTTPS
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        volumeMounts:
        - mountPath: /var/run/secrets/amazonaws.com/
          name: token-amazonaws-com
          readOnly: true
      priorityClassName: system-cluster-critical
      securityContext:
        fsGroup: 10001
      serviceAccountName: karpenter
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            karpenter: webhook
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            karpenter: webhook
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
      volumes:
      - name: token-amazonaws-com
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              audience: amazonaws.com
              expirationSeconds: 86400
              path: token

---

apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: defaulting.webhook.provisioners.karpenter.sh
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: karpenter-webhook
      namespace: kube-system
  failurePolicy: Fail
  name: defaulting.webhook.provisioners.karpenter.sh
  rules:
  - apiGroups:
    - karpenter.sh
    apiVersions:
    - v1alpha5
    operations:
    - CREATE
    - UPDATE
    resources:
    - provisioners provisioners/status
  sideEffects: None

---

apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: validation.webhook.provisioners.karpenter.sh
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: karpenter-webhook
      namespace: kube-system
  failurePolicy: Fail
  name: validation.webhook.provisioners.karpenter.sh
  rules:
  - apiGroups:
    - karpenter.sh
    apiVersions:
    - v1alpha5
    operations:
    - CREATE
    - UPDATE
    resources:
    - provisioners provisioners/status
  sideEffects: None

---

apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: validation.webhook.config.karpenter.sh
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: karpenter-webhook
      namespace: kube-system
  failurePolicy: Fail
  name: validation.webhook.config.karpenter.sh
  objectSelector:
    matchLabels:
      app.kubernetes.io/part-of: karpenter
  sideEffects: None

---

apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-nodes-default
spec:
  provider:
    instanceProfile: nodes.minimal.example.com
    launchTemplate: karpenter-nodes-default.minimal.example.com
    securityGroupSelector:
      Name: nodes.minimal.example.com
    subnetSelector:
      kubernetes.io/cluster/minimal.example.com: '*'
      kubernetes.io/role/internal-elb: "1"
  requirements:
  - key: karpenter.sh/capacity-type
    operator: In
    values:
    - spot
  - key: kubernetes.io/arch
    operator: In
    values:
    - amd64
  - key: node.kubernetes.io/instance-type
    operator: In
    values:
    - c5.large
  ttlSecondsAfterEmpty: 30

---

apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  creationTimestamp: null
  labels:
    addon.kops.k8s.io/name: karpenter.sh
    app.kubernetes.io/managed-by: kops
    k8s-addon: karpenter.sh
  name: karpenter-nodes-single-machinetype
spec:
  provider:
    instanceProfile: nodes.minimal.example.com
    launchTemplate: karpenter-nodes-single-machinetype.minimal.example.com
    securityGroupSelector:
      Name: nodes.minimal.example.com
    subnetSelector:
      kubernetes.io/cluster/minimal.example.com: '*'
      kubernetes.io/role/internal-elb: "1"
  requirements:
  - key: karpenter.sh/capacity-type
    operator: In
    values:
    - spot
  - key: kubernetes.io/arch
    operator: In
    values:
    - amd64
  - key: node.kubernetes.io/instance-type
    operator: In
    values:
    - t2.medium
  ttlSecondsAfterEmpty: 30
